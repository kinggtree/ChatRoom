// 由websocket代替
router.post('/sendMessage', function(req,res) {
  if(!req.session._id)
    return res.status(401).send("No session!");

  try {
    Message.create({
      sender: {
        senderName: req.body.sender.senderName,
        senderId: new mongoose.Types.ObjectId(req.body.sender.senderId)
      },
      receiver:{
        receiverName: req.body.receiver.receiverName,
        receiverId: new mongoose.Types.ObjectId(req.body.receiver.receiverId)
      },
      message: {
        messageType: req.body.message.type,
        messageContent: req.body.message.content
      },
      date: new Date()
    });
  } catch (err) {
    console.log(err);
    res.status(500).send("internal server error!");
  }
  
  res.status(200).send();
});



//获取指定用户头像-二进制图片数据发送方法
router.get('/profilePictureBinary', function(req, res){
  if(!req.session._id)
  return res.status(401).send("No session!");

  try{
    res.set('Cache-Control', 'no-store');
    User.findOne({_id: req.session._id})
      .then((response)=>{
        picPath=response.profilePicture;

        var stream=fs.createReadStream(picPath);

        stream.on("data",chunk=>{
          res.write(chunk);
        });

        stream.on('error', err => {
          console.error(err);
          res.status(500).json({ error: 'Error reading file' });
        });

        stream.on("end", ()=>{
          // end 同时也会发送
          res.status(200).end();
        });

      })
      .catch((err)=>{
        res.status(500).send("internal server error!");
        console.log(err);
      });
  } catch(err){
    res.status(500).send("internal server error!");
    console.log(err);
  }
});